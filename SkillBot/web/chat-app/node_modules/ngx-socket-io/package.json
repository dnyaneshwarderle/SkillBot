{
  "_from": "ngx-socket-io@^2.1.1",
  "_id": "ngx-socket-io@2.1.1",
  "_inBundle": false,
  "_integrity": "sha512-VYg64N7v6V1zoZIfiqJqEE+y8R7OWUGZUDzbDxqk0wTWZyqyQaWAvyFzThnBjFkxkyj6cFaIDHH+N4k82rst5g==",
  "_location": "/ngx-socket-io",
  "_phantomChildren": {
    "accepts": "1.3.5",
    "base64id": "1.0.0",
    "cookie": "0.3.1",
    "engine.io-parser": "2.1.3",
    "has-binary2": "1.0.3",
    "socket.io-adapter": "1.1.1",
    "socket.io-client": "2.2.0",
    "socket.io-parser": "3.3.0",
    "ws": "6.1.3"
  },
  "_requested": {
    "escapedName": "ngx-socket-io",
    "fetchSpec": "^2.1.1",
    "name": "ngx-socket-io",
    "raw": "ngx-socket-io@^2.1.1",
    "rawSpec": "^2.1.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-socket-io/-/ngx-socket-io-2.1.1.tgz",
  "_shasum": "abf61f6f50fd5e56344f8559026a0d2333a72684",
  "_shrinkwrap": null,
  "_spec": "ngx-socket-io@^2.1.1",
  "_where": "/home/azir/Desktop/office/Web interface for chatbot",
  "author": {
    "name": "rodgc"
  },
  "bugs": {
    "url": "https://github.com/rodgc/ngx-socket-io/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "core-js": "^2.4.1",
    "reflect-metadata": "^0.1.10",
    "rxjs": "^6.1.0",
    "socket.io": "^2.0.1",
    "socket.io-client": "^2.0.1",
    "zone.js": "^0.8.11"
  },
  "deprecated": false,
  "description": "Socket.IO module for Angular 7",
  "devDependencies": {
    "@angular/cli": "^1.1.0",
    "@angular/compiler": "^5.0.0",
    "@angular/compiler-cli": "^5.0.0",
    "@types/node": "^7.0.22",
    "@types/socket.io": "^1.4.29",
    "@types/socket.io-client": "^1.4.29",
    "es6-shim": "^0.35.3",
    "rollup": "^0.41.6",
    "server-destroy": "^1.0.1",
    "ts-node": "^3.0.4",
    "tslint": "^5.4.0",
    "typescript": "^2.4.2",
    "uglify-js": "^3.0.14"
  },
  "homepage": "https://github.com/rodgc/ngx-socket-io#readme",
  "keywords": [
    "Angular 4",
    "Socket-io"
  ],
  "license": "MIT",
  "main": "index.ts",
  "name": "ngx-socket-io",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^6.0.0 || ^7.0.0",
    "@angular/core": "^6.0.0 || ^7.0.0",
    "rxjs": "^6.0.0"
  },
  "readme": "# ngx-socket-io\n[![Build Status](https://travis-ci.org/rodgc/ngx-socket-io.svg?branch=master)](https://travis-ci.org/rodgc/ngx-socket-io)\n[![npm version](https://badge.fury.io/js/ngx-socket-io.svg)](https://badge.fury.io/js/ngx-socket-io)\n[![npm downloads](https://img.shields.io/badge/Downloads-132%2Fmonth-brightgreen.svg)](https://github.com/rodgc/ngx-socket-io)\n\n[Socket.IO](http://socket.io/) module for Angular 7\n\n## Install\n``` npm install ngx-socket-io ```\n\n## How to use\n\n### Import and configure SocketIoModule\n\n```ts\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\n\nconst config: SocketIoConfig = { url: 'http://localhost:8988', options: {} };\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    SocketIoModule.forRoot(config)\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nWe need to configure ```SocketIoModule``` module using the object ```config``` of type ```SocketIoConfig```, this object accepts two optional properties they are the same used here [io(url[, options])](https://github.com/socketio/socket.io-client/blob/master/docs/API.md#iourl-options).\n\nNow we pass the configuration to the static method ```forRoot``` of ```SocketIoModule```\n\n\n### Using your socket Instance\n\nThe ```SocketIoModule``` provides now a configured ```Socket``` service that can be injected anywhere inside the ```AppModule```.\n\n```typescript\n\nimport { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\n\n@Injectable()\nexport class ChatService {\n\n    constructor(private socket: Socket) { }\n\n    sendMessage(msg: string){\n        this.socket.emit(\"message\", msg);\n    }\n     getMessage() {\n        return this.socket\n            .fromEvent(\"message\")\n            .map( data => data.msg );\n    }\n}\n\n```\n\n### Using multiple sockets with different end points\n\nIn this case we do not configure the ```SocketIoModule``` directly using ```forRoot```. What we have to do is: extend the ```Socket``` service, and call ```super()``` with the ```SocketIoConfig``` object type (passing ```url``` & ```options``` if any).\n\n```typescript\n\nimport { Injectable, NgModule } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\n\n@Injectable()\nexport class SocketOne extends Socket {\n\n    constructor() {\n        super({ url: 'http://url_one:portOne', options: {} });\n    }\n\n}\n\n@Injectable()\nexport class SocketTwo extends Socket {\n\n    constructor() {\n        super({ url: 'http://url_two:portTwo', options: {} });\n    }\n\n}\n\n@NgModule({\n  declarations: [\n    //components\n  ],\n  imports: [\n    SocketIoModule,\n    //...\n  ],\n  providers: [SocketOne, SocketTwo],\n  bootstrap: [/** AppComponent **/]\n})\nexport class AppModule { }\n\n```\n\nNow you can inject ```SocketOne```, ```SocketTwo``` in any other services and / or components.\n\n\n## API\n\nMost of the functionalities here you are already familiar with.\n\nThe only addition is the ```fromEvent``` method, which returns an ```Observable``` that you can subscribe to.\n\n### `socket.of(namespace: string)`\n\nTakes an namespace.\nWorks the same as in Socket.IO.\n\n### `socket.on(eventName: string, callback: Function)`\n\nTakes an event name and callback.\nWorks the same as in Socket.IO.\n\n### `socket.removeListener(eventName: string, callback?: Function)`\n\nTakes an event name and callback.\nWorks the same as in Socket.IO.\n\n### `socket.removeAllListeners(eventName?: string)`\n\nTakes an event name.\nWorks the same as in Socket.IO.\n\n### `socket.emit(eventName:string, message?: any, [callback: Function])`\n\nSends a message to the server.\nOptionally takes a callback.\nWorks the same as in Socket.IO.\n\n### `socket.fromEvent<T>(eventName: string): Observable<T>`\n\nTakes an event name and returns an Observable that you can subscribe to.\n\n### `socket.fromEventOnce<T>(eventName: string): Promise<T>`\n\nCreates a Promise for a one-time event.\n\nYou should keep a reference to the Observable subscription and unsubscribe when you're done with it.\nThis prevents memory leaks as the event listener attached will be removed (using ```socket.removeListener```) ONLY and when/if you unsubscribe.\n\nIf you have multiple subscriptions to an Observable only the last unsubscription will remove the listener.\n\n\n## LICENSE\n\nMIT\n\nRelated projects\n----------------\n\n- [bougarfaoui/ng-socket-io](https://github.com/bougarfaoui/ng-socket-io) - Socket.IO module for Angular",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rodgc/ngx-socket-io.git"
  },
  "scripts": {
    "build": "npm run transpile && npm run package && npm run minify",
    "minify": "uglifyjs dist/bundles/socketio.umd.js --screw-ie8 --compress --mangle --comments --output dist/bundles/socketio.umd.min.js",
    "package": "rollup -c",
    "transpile": "ngc"
  },
  "version": "2.1.1"
}
